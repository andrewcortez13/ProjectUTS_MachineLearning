# -*- coding: utf-8 -*-
"""spamClassifier(github).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14HQJf5GGhtNlRgKstxVEiY8gC2Q9QTRC
"""

import os
import tarfile
import urllib.request

#memmbuat directory dari link-link yang akan digunakan pake string download_root sebagai root dari semua file, dan menambahkan lokasi data lainnya
DOWNLOAD_ROOT = "http://spamassassin.apache.org/old/publiccorpus/"
HAM_URL = DOWNLOAD_ROOT + "20030228_easy_ham.tar.bz2"
SPAM_URL = DOWNLOAD_ROOT + "20030228_spam.tar.bz2"
SPAM_PATH = os.path.join("datasets", "spam")

#function untuk mengambil spam data, dan membuat directory
def fetch_spam_data(ham_url=HAM_URL, spam_url=SPAM_URL, spam_path=SPAM_PATH):
    #membuat directory jika tidak ada jalur ke directory
    if not os.path.isdir(spam_path):
        os.makedirs(spam_path)
    for filename, url in (("ham.tar.bz2", ham_url), ("spam.tar.bz2", spam_url)):
        path = os.path.join(spam_path, filename)
        if not os.path.isfile(path):
            urllib.request.urlretrieve(url, path)
        tar_bz2_file = tarfile.open(path)
        tar_bz2_file.extractall(path=spam_path)
        tar_bz2_file.close()

fetch_spam_data()

HAM_DIR = os.path.join(SPAM_PATH, "easy_ham")
SPAM_DIR = os.path.join(SPAM_PATH, "spam")
ham_filenames = [name for name in sorted(os.listdir(HAM_DIR)) if len(name) > 20]
spam_filenames = [name for name in sorted(os.listdir(SPAM_DIR)) if len(name) > 20]

#mengecek berapa banyak ham_filenames yang ada, disini ada 2500 files

len(ham_filenames)

#mengecek berapa banyak file yang merupakan spam, disini ada 500 files

len(spam_filenames)

import email
import email.policy
#memberikan pemisahan pada data disini kalo spam, diberikan directory=spam, jika tidak masuk kepada easy_ham

def load_email(is_spam, filename, spam_path=SPAM_PATH):
    directory = "spam" if is_spam else "easy_ham"
    with open(os.path.join(spam_path, directory, filename), "rb") as f:
        return email.parser.BytesParser(policy=email.policy.default).parse(f)

#mengambil data ham_emails dan spam_email

ham_emails = [load_email(is_spam=False, filename=name) for name in ham_filenames]
spam_emails = [load_email(is_spam=True, filename=name) for name in spam_filenames]

#mengambil contoh data 1 yang bukan merupakan spam_emails

print(ham_emails[1].get_content().strip())

#mengambil contoh data 1 yang merupakan spam_emails

print(spam_emails[6].get_content().strip())

def get_email_structure(email):
    if isinstance(email, str):
        return email
    payload = email.get_payload()
    if isinstance(payload, list):
        return "multipart({})".format(", ".join([
            get_email_structure(sub_email)
            for sub_email in payload
        ]))
    else:
        return email.get_content_type()

from collections import Counter

#function untuk mengambil structure email, dari function get_email_structure
def structures_counter(emails):
    structures = Counter()
    for email in emails:
        structure = get_email_structure(email)
        structures[structure] += 1
    return structures

#mengecek jenis file yang biasa dikirim di email, beserta jumlah dari files tersebut yang terkirim pada email yang bukan merupakan spam
#contoh : disini banyak mengirimkan plain text, dikarenakan biasanya isi email seperti itu, dan di spam juga

structures_counter(ham_emails).most_common()

#mengecek jenis file yang biasa dikirim di email, dan jumlah file tersebut yang merupakan spam
#disini dapat dilihat jika email spam, juga kadang menyertakan image di emailnya, ada 3 spam email dengan email

structures_counter(spam_emails).most_common()

#mengecek header email yang dikirim pada spam, disini dapat dilihat ip pengirim, pengirim, subject, dan tanggal
#mungkin darisini, kita dapat mengetahui alamat email, beserta ip yang sering mengirimkan spam email

for header, value in spam_emails[0].items():
    print(header,":",value)

#jika kita ingin mengambil salah satu data dari header, variable yhang terdapat pada header dapat dilihat di code atas, value

spam_emails[0]["Subject"]

#coba untuk melihat contoh-contoh header email yang merupakan spam email

for i in range (50) :
  print (ham_emails[i]["Subject"])

for i in range (50) :
  print (spam_emails[i]["Subject"])

#mentrain data yang akan digunakan, dan juga data prespocessing, disini dipisahkan data yang merupakan data train, dan test set, untuk menguji ketepatan data
#disini kita mengambil 20% dari data

import numpy as np
from sklearn.model_selection import train_test_split

X = np.array(ham_emails + spam_emails, dtype=object)
y = np.array([0] * len(ham_emails) + [1] * len(spam_emails))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

import re
from html import unescape
#fungsi untuk merubah format html email ke plain text, agar format data universal

def html_to_plain_text(html):
    text = re.sub('<head.*?>.*?</head>', '', html, flags=re.M | re.S | re.I)
    text = re.sub('<a\s.*?>', ' HYPERLINK ', text, flags=re.M | re.S | re.I)
    text = re.sub('<.*?>', '', text, flags=re.M | re.S)
    text = re.sub(r'(\s*\n)+', '\n', text, flags=re.M | re.S)
    return unescape(text)

#membuat var html_spam_emails, mengambil data yang html, dan dilihat datanya

html_spam_emails = [email for email in X_train[y_train==1]
                    if get_email_structure(email) == "text/html"]
sample_html_spam = html_spam_emails[7]
print(sample_html_spam.get_content().strip()[:1000], "...")

#coba untuk melihat data yang merupakan image/jpeg

html_spam_jpg = [email for email in X_train[y_train==1]
                    if get_email_structure(email) == "image/jpeg"]
sample_html_spam = html_spam_emails[7]
print(sample_html_spam.get_content().strip()[:1000], "...")

#mengeprint data 

print(html_to_plain_text(sample_html_spam.get_content())[:1000], "...")

#merubah format email ke dalam plain text


def email_to_text(email):
    html = None
    for part in email.walk():
        ctype = part.get_content_type()
        if not ctype in ("text/plain", "text/html"):
            continue
        try:
            content = part.get_content()
        except: # in case of encoding issues
            content = str(part.get_payload())
        if ctype == "text/plain":
            return content
        else:
            html = content
    if html:
        return html_to_plain_text(html)

#mencoba print email to text, dalam bentuk plain text


print(email_to_text(sample_html_spam)[:100], "...")

#mencoba function untuk menyingkat string, disini biasanya arti yang memiliki arti yang sama jadi singkatan


try:
    import nltk

    stemmer = nltk.PorterStemmer()
    for word in ("Computations", "Computation", "Computing", "Computed", "Compute", "Compulsive"):
        print(word, "=>", stemmer.stem(word))
except ImportError:
    print("Error: stemming requires the NLTK module.")
    stemmer = None

pip install urlextract

try:
    import urlextract # may require an Internet connection to download root domain names
    
    url_extractor = urlextract.URLExtract()
    print(url_extractor.find_urls("Will it detect github.com and https://youtu.be/7Pq-S557XQU?t=3m32s"))
except ImportError:
    print("Error: replacing URLs requires the urlextract module.")
    url_extractor = None

from sklearn.base import BaseEstimator, TransformerMixin

#konversi email menjadi penghitung kata, disini membagi kalimat menjadi per kata-kata dengan split(). Ini bekerja di hampir semua text, tapi 
#ada text yang tidak seperti ini, misal skrip China dan Jepang, tidak memisahkan bedasarkan spasi, tapi disini data set kebanyakan menggunkan bahasa Inggris

#class emailtowordcountertransformer, disini ada class yang berisi function-function untuk menyamakan format dari text tersebut, menjadi universal
#misal kalimat dibuat huruf kecil semua


class EmailToWordCounterTransformer(BaseEstimator, TransformerMixin):
    def __init__(self, strip_headers=True, lower_case=True, remove_punctuation=True,
                 replace_urls=True, replace_numbers=True, stemming=True):
        self.strip_headers = strip_headers
        self.lower_case = lower_case
        self.remove_punctuation = remove_punctuation
        self.replace_urls = replace_urls
        self.replace_numbers = replace_numbers
        self.stemming = stemming
    def fit(self, X, y=None):
        return self
    def transform(self, X, y=None):
        X_transformed = []
        for email in X:
            text = email_to_text(email) or ""
            if self.lower_case:
                text = text.lower()
            if self.replace_urls and url_extractor is not None:
                urls = list(set(url_extractor.find_urls(text)))
                urls.sort(key=lambda url: len(url), reverse=True)
                for url in urls:
                    text = text.replace(url, " URL ")
            if self.replace_numbers:
                text = re.sub(r'\d+(?:\.\d*)?(?:[eE][+-]?\d+)?', 'NUMBER', text)
            if self.remove_punctuation:
                text = re.sub(r'\W+', ' ', text, flags=re.M)
            word_counts = Counter(text.split())
            if self.stemming and stemmer is not None:
                stemmed_word_counts = Counter()
                for word, count in word_counts.items():
                    stemmed_word = stemmer.stem(word)
                    stemmed_word_counts[stemmed_word] += count
                word_counts = stemmed_word_counts
            X_transformed.append(word_counts)
        return np.array(X_transformed)

X_few = X_train[:3]
#fit dan transform, 3 data terdepan dari X_train, lalu disini output ada 3 kata-kata yang sering digunakan beserta countnya


X_few_wordcounts = EmailToWordCounterTransformer().fit_transform(X_few)
X_few_wordcounts

from scipy.sparse import csr_matrix

#merubah jumlah kata ke vektor, disini function fit berfungsi sebagai pembangun kosakata dari kata-kata yang paling umum digunakan
#transform yang merubah jumlah kata menjadi bentuk vektor


class WordCounterToVectorTransformer(BaseEstimator, TransformerMixin):
    def __init__(self, vocabulary_size=1000):
        self.vocabulary_size = vocabulary_size
    def fit(self, X, y=None):
        total_count = Counter()
        for word_count in X:
            for word, count in word_count.items():
                total_count[word] += min(count, 10)
        most_common = total_count.most_common()[:self.vocabulary_size]
        self.vocabulary_ = {word: index + 1 for index, (word, count) in enumerate(most_common)}
        return self
    def transform(self, X, y=None):
        rows = []
        cols = []
        data = []
        for row, word_count in enumerate(X):
            for word, count in word_count.items():
                rows.append(row)
                cols.append(self.vocabulary_.get(word, 0))
                data.append(count)
        return csr_matrix((data, (rows, cols)), shape=(len(X), self.vocabulary_size + 1))

vocab_transformer = WordCounterToVectorTransformer(vocabulary_size=10)
X_few_vectors = vocab_transformer.fit_transform(X_few_wordcounts)
X_few_vectors

#arti dari matrix ini, angka 99 (baris 2 kolom 1), Berisi 99 kata yang bukan
#berasal dari kosakata, angka 11 berarti kata pertama dalam kosakata hadir 11 kali dalam email ini, angka 9 disini
#berarti kata kedua hadir sebanyak 9 kali. Kata pertama disini (the), kata kedua (of),dll

X_few_vectors.toarray()

vocab_transformer.vocabulary_

from sklearn.pipeline import Pipeline
#prepocessing data, transform data, dan juga training data dilakukan disini

preprocess_pipeline = Pipeline([
    ("email_to_wordcount", EmailToWordCounterTransformer()),
    ("wordcount_to_vector", WordCounterToVectorTransformer()),
])

X_train_transformed = preprocess_pipeline.fit_transform(X_train)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score

#mengecek score rata-rata dari cross validation

log_clf = LogisticRegression(solver="lbfgs", max_iter=1000, random_state=42)
score = cross_val_score(log_clf, X_train_transformed, y_train, cv=3, verbose=3)
score.mean()

#mengecek persentase ke presisian, dan recall
#disini data yang kita train, dan resultnya mendapatkan hasil yang sangat bagus
#tapi, dataset ini dianggap mudah, oleh pembuat, ketika kita mengganti dataset yang lebih beragam, hasil mungkin tidak sepresisi ini


from sklearn.metrics import precision_score, recall_score

X_test_transformed = preprocess_pipeline.transform(X_test)

log_clf = LogisticRegression(solver="lbfgs", max_iter=1000, random_state=42)
log_clf.fit(X_train_transformed, y_train)

y_pred = log_clf.predict(X_test_transformed)

#mencari nilai kepresisian dan recall, dan dirubah dalam bentuk (%) dan dibulatkan 2 digit setelah (,) atau (.) disini

print("Precision: {:.2f}%".format(100 * precision_score(y_test, y_pred)))
print("Recall: {:.2f}%".format(100 * recall_score(y_test, y_pred)))